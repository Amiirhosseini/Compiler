State 61 conflicts: 12 shift/reduce


Grammar

    0 $accept: program $end

    1 program: statements

    2 statements: %empty
    3           | statements statement

    4 statement: declaration
    5          | assignment
    6          | conditional
    7          | loop

    8 type: INT
    9     | BOOL

   10 declaration: type identifiers SEMICOLON

   11 identifiers: IDENTIFIER
   12            | identifiers COMMA IDENTIFIER

   13 assignment: IDENTIFIER ASSIGN expression SEMICOLON
   14           | type IDENTIFIER ASSIGN expression SEMICOLON

   15 conditional: IF LPAREN expression RPAREN LBRACE statements RBRACE
   16            | IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE

   17 loop: WHILE LPAREN expression RPAREN LBRACE statements RBRACE

   18 expression: IDENTIFIER
   19           | literal
   20           | expression binary_operator expression
   21           | NOT expression
   22           | LPAREN expression RPAREN
   23           | MINUS expression

   24 literal: boolean_literal
   25        | INTEGER_LITERAL

   26 boolean_literal: TRUE
   27                | FALSE

   28 binary_operator: arithmetic_operator
   29                | relational_operator
   30                | logical_operator

   31 arithmetic_operator: PLUS
   32                    | MINUS
   33                    | TIMES
   34                    | DIVIDE

   35 relational_operator: LT
   36                    | GT
   37                    | LTE
   38                    | GTE
   39                    | EQ
   40                    | NEQ

   41 logical_operator: OR
   42                 | AND


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    INT (258) 8
    BOOL (259) 9
    IF (260) 15 16
    ELSE (261) 16
    WHILE (262) 17
    TRUE (263) 26
    FALSE (264) 27
    OR (265) 41
    AND (266) 42
    ASSIGN (267) 13 14
    EQ (268) 39
    NEQ (269) 40
    LTE (270) 37
    GTE (271) 38
    LT (272) 35
    GT (273) 36
    PLUS (274) 31
    MINUS (275) 23 32
    TIMES (276) 33
    DIVIDE (277) 34
    NOT (278) 21
    LPAREN (279) 15 16 17 22
    RPAREN (280) 15 16 17 22
    LBRACE (281) 15 16 17
    RBRACE (282) 15 16 17
    SEMICOLON (283) 10 13 14
    COMMA (284) 12
    INTEGER_LITERAL <value> (285) 25
    IDENTIFIER <name> (286) 11 12 13 14 18


Nonterminals, with rules where they appear

    $accept (32)
        on left: 0
    program (33)
        on left: 1
        on right: 0
    statements (34)
        on left: 2 3
        on right: 1 3 15 16 17
    statement (35)
        on left: 4 5 6 7
        on right: 3
    type (36)
        on left: 8 9
        on right: 10 14
    declaration (37)
        on left: 10
        on right: 4
    identifiers (38)
        on left: 11 12
        on right: 10 12
    assignment (39)
        on left: 13 14
        on right: 5
    conditional (40)
        on left: 15 16
        on right: 6
    loop (41)
        on left: 17
        on right: 7
    expression (42)
        on left: 18 19 20 21 22 23
        on right: 13 14 15 16 17 20 21 22 23
    literal (43)
        on left: 24 25
        on right: 19
    boolean_literal (44)
        on left: 26 27
        on right: 24
    binary_operator (45)
        on left: 28 29 30
        on right: 20
    arithmetic_operator (46)
        on left: 31 32 33 34
        on right: 28
    relational_operator (47)
        on left: 35 36 37 38 39 40
        on right: 29
    logical_operator (48)
        on left: 41 42
        on right: 30


State 0

    0 $accept: . program $end

    $default  reduce using rule 2 (statements)

    program     go to state 1
    statements  go to state 2


State 1

    0 $accept: program . $end

    $end  shift, and go to state 3


State 2

    1 program: statements .
    3 statements: statements . statement

    INT         shift, and go to state 4
    BOOL        shift, and go to state 5
    IF          shift, and go to state 6
    WHILE       shift, and go to state 7
    IDENTIFIER  shift, and go to state 8

    $default  reduce using rule 1 (program)

    statement    go to state 9
    type         go to state 10
    declaration  go to state 11
    assignment   go to state 12
    conditional  go to state 13
    loop         go to state 14


State 3

    0 $accept: program $end .

    $default  accept


State 4

    8 type: INT .

    $default  reduce using rule 8 (type)


State 5

    9 type: BOOL .

    $default  reduce using rule 9 (type)


State 6

   15 conditional: IF . LPAREN expression RPAREN LBRACE statements RBRACE
   16            | IF . LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE

    LPAREN  shift, and go to state 15


State 7

   17 loop: WHILE . LPAREN expression RPAREN LBRACE statements RBRACE

    LPAREN  shift, and go to state 16


State 8

   13 assignment: IDENTIFIER . ASSIGN expression SEMICOLON

    ASSIGN  shift, and go to state 17


State 9

    3 statements: statements statement .

    $default  reduce using rule 3 (statements)


State 10

   10 declaration: type . identifiers SEMICOLON
   14 assignment: type . IDENTIFIER ASSIGN expression SEMICOLON

    IDENTIFIER  shift, and go to state 18

    identifiers  go to state 19


State 11

    4 statement: declaration .

    $default  reduce using rule 4 (statement)


State 12

    5 statement: assignment .

    $default  reduce using rule 5 (statement)


State 13

    6 statement: conditional .

    $default  reduce using rule 6 (statement)


State 14

    7 statement: loop .

    $default  reduce using rule 7 (statement)


State 15

   15 conditional: IF LPAREN . expression RPAREN LBRACE statements RBRACE
   16            | IF LPAREN . expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE

    TRUE             shift, and go to state 20
    FALSE            shift, and go to state 21
    MINUS            shift, and go to state 22
    NOT              shift, and go to state 23
    LPAREN           shift, and go to state 24
    INTEGER_LITERAL  shift, and go to state 25
    IDENTIFIER       shift, and go to state 26

    expression       go to state 27
    literal          go to state 28
    boolean_literal  go to state 29


State 16

   17 loop: WHILE LPAREN . expression RPAREN LBRACE statements RBRACE

    TRUE             shift, and go to state 20
    FALSE            shift, and go to state 21
    MINUS            shift, and go to state 22
    NOT              shift, and go to state 23
    LPAREN           shift, and go to state 24
    INTEGER_LITERAL  shift, and go to state 25
    IDENTIFIER       shift, and go to state 26

    expression       go to state 30
    literal          go to state 28
    boolean_literal  go to state 29


State 17

   13 assignment: IDENTIFIER ASSIGN . expression SEMICOLON

    TRUE             shift, and go to state 20
    FALSE            shift, and go to state 21
    MINUS            shift, and go to state 22
    NOT              shift, and go to state 23
    LPAREN           shift, and go to state 24
    INTEGER_LITERAL  shift, and go to state 25
    IDENTIFIER       shift, and go to state 26

    expression       go to state 31
    literal          go to state 28
    boolean_literal  go to state 29


State 18

   11 identifiers: IDENTIFIER .
   14 assignment: type IDENTIFIER . ASSIGN expression SEMICOLON

    ASSIGN  shift, and go to state 32

    $default  reduce using rule 11 (identifiers)


State 19

   10 declaration: type identifiers . SEMICOLON
   12 identifiers: identifiers . COMMA IDENTIFIER

    SEMICOLON  shift, and go to state 33
    COMMA      shift, and go to state 34


State 20

   26 boolean_literal: TRUE .

    $default  reduce using rule 26 (boolean_literal)


State 21

   27 boolean_literal: FALSE .

    $default  reduce using rule 27 (boolean_literal)


State 22

   23 expression: MINUS . expression

    TRUE             shift, and go to state 20
    FALSE            shift, and go to state 21
    MINUS            shift, and go to state 22
    NOT              shift, and go to state 23
    LPAREN           shift, and go to state 24
    INTEGER_LITERAL  shift, and go to state 25
    IDENTIFIER       shift, and go to state 26

    expression       go to state 35
    literal          go to state 28
    boolean_literal  go to state 29


State 23

   21 expression: NOT . expression

    TRUE             shift, and go to state 20
    FALSE            shift, and go to state 21
    MINUS            shift, and go to state 22
    NOT              shift, and go to state 23
    LPAREN           shift, and go to state 24
    INTEGER_LITERAL  shift, and go to state 25
    IDENTIFIER       shift, and go to state 26

    expression       go to state 36
    literal          go to state 28
    boolean_literal  go to state 29


State 24

   22 expression: LPAREN . expression RPAREN

    TRUE             shift, and go to state 20
    FALSE            shift, and go to state 21
    MINUS            shift, and go to state 22
    NOT              shift, and go to state 23
    LPAREN           shift, and go to state 24
    INTEGER_LITERAL  shift, and go to state 25
    IDENTIFIER       shift, and go to state 26

    expression       go to state 37
    literal          go to state 28
    boolean_literal  go to state 29


State 25

   25 literal: INTEGER_LITERAL .

    $default  reduce using rule 25 (literal)


State 26

   18 expression: IDENTIFIER .

    $default  reduce using rule 18 (expression)


State 27

   15 conditional: IF LPAREN expression . RPAREN LBRACE statements RBRACE
   16            | IF LPAREN expression . RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE
   20 expression: expression . binary_operator expression

    OR      shift, and go to state 38
    AND     shift, and go to state 39
    EQ      shift, and go to state 40
    NEQ     shift, and go to state 41
    LTE     shift, and go to state 42
    GTE     shift, and go to state 43
    LT      shift, and go to state 44
    GT      shift, and go to state 45
    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49
    RPAREN  shift, and go to state 50

    binary_operator      go to state 51
    arithmetic_operator  go to state 52
    relational_operator  go to state 53
    logical_operator     go to state 54


State 28

   19 expression: literal .

    $default  reduce using rule 19 (expression)


State 29

   24 literal: boolean_literal .

    $default  reduce using rule 24 (literal)


State 30

   17 loop: WHILE LPAREN expression . RPAREN LBRACE statements RBRACE
   20 expression: expression . binary_operator expression

    OR      shift, and go to state 38
    AND     shift, and go to state 39
    EQ      shift, and go to state 40
    NEQ     shift, and go to state 41
    LTE     shift, and go to state 42
    GTE     shift, and go to state 43
    LT      shift, and go to state 44
    GT      shift, and go to state 45
    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49
    RPAREN  shift, and go to state 55

    binary_operator      go to state 51
    arithmetic_operator  go to state 52
    relational_operator  go to state 53
    logical_operator     go to state 54


State 31

   13 assignment: IDENTIFIER ASSIGN expression . SEMICOLON
   20 expression: expression . binary_operator expression

    OR         shift, and go to state 38
    AND        shift, and go to state 39
    EQ         shift, and go to state 40
    NEQ        shift, and go to state 41
    LTE        shift, and go to state 42
    GTE        shift, and go to state 43
    LT         shift, and go to state 44
    GT         shift, and go to state 45
    PLUS       shift, and go to state 46
    MINUS      shift, and go to state 47
    TIMES      shift, and go to state 48
    DIVIDE     shift, and go to state 49
    SEMICOLON  shift, and go to state 56

    binary_operator      go to state 51
    arithmetic_operator  go to state 52
    relational_operator  go to state 53
    logical_operator     go to state 54


State 32

   14 assignment: type IDENTIFIER ASSIGN . expression SEMICOLON

    TRUE             shift, and go to state 20
    FALSE            shift, and go to state 21
    MINUS            shift, and go to state 22
    NOT              shift, and go to state 23
    LPAREN           shift, and go to state 24
    INTEGER_LITERAL  shift, and go to state 25
    IDENTIFIER       shift, and go to state 26

    expression       go to state 57
    literal          go to state 28
    boolean_literal  go to state 29


State 33

   10 declaration: type identifiers SEMICOLON .

    $default  reduce using rule 10 (declaration)


State 34

   12 identifiers: identifiers COMMA . IDENTIFIER

    IDENTIFIER  shift, and go to state 58


State 35

   20 expression: expression . binary_operator expression
   23           | MINUS expression .

    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49

    $default  reduce using rule 23 (expression)

    binary_operator      go to state 51
    arithmetic_operator  go to state 52
    relational_operator  go to state 53
    logical_operator     go to state 54


State 36

   20 expression: expression . binary_operator expression
   21           | NOT expression .

    $default  reduce using rule 21 (expression)

    binary_operator      go to state 51
    arithmetic_operator  go to state 52
    relational_operator  go to state 53
    logical_operator     go to state 54


State 37

   20 expression: expression . binary_operator expression
   22           | LPAREN expression . RPAREN

    OR      shift, and go to state 38
    AND     shift, and go to state 39
    EQ      shift, and go to state 40
    NEQ     shift, and go to state 41
    LTE     shift, and go to state 42
    GTE     shift, and go to state 43
    LT      shift, and go to state 44
    GT      shift, and go to state 45
    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49
    RPAREN  shift, and go to state 59

    binary_operator      go to state 51
    arithmetic_operator  go to state 52
    relational_operator  go to state 53
    logical_operator     go to state 54


State 38

   41 logical_operator: OR .

    $default  reduce using rule 41 (logical_operator)


State 39

   42 logical_operator: AND .

    $default  reduce using rule 42 (logical_operator)


State 40

   39 relational_operator: EQ .

    $default  reduce using rule 39 (relational_operator)


State 41

   40 relational_operator: NEQ .

    $default  reduce using rule 40 (relational_operator)


State 42

   37 relational_operator: LTE .

    $default  reduce using rule 37 (relational_operator)


State 43

   38 relational_operator: GTE .

    $default  reduce using rule 38 (relational_operator)


State 44

   35 relational_operator: LT .

    $default  reduce using rule 35 (relational_operator)


State 45

   36 relational_operator: GT .

    $default  reduce using rule 36 (relational_operator)


State 46

   31 arithmetic_operator: PLUS .

    $default  reduce using rule 31 (arithmetic_operator)


State 47

   32 arithmetic_operator: MINUS .

    $default  reduce using rule 32 (arithmetic_operator)


State 48

   33 arithmetic_operator: TIMES .

    $default  reduce using rule 33 (arithmetic_operator)


State 49

   34 arithmetic_operator: DIVIDE .

    $default  reduce using rule 34 (arithmetic_operator)


State 50

   15 conditional: IF LPAREN expression RPAREN . LBRACE statements RBRACE
   16            | IF LPAREN expression RPAREN . LBRACE statements RBRACE ELSE LBRACE statements RBRACE

    LBRACE  shift, and go to state 60


State 51

   20 expression: expression binary_operator . expression

    TRUE             shift, and go to state 20
    FALSE            shift, and go to state 21
    MINUS            shift, and go to state 22
    NOT              shift, and go to state 23
    LPAREN           shift, and go to state 24
    INTEGER_LITERAL  shift, and go to state 25
    IDENTIFIER       shift, and go to state 26

    expression       go to state 61
    literal          go to state 28
    boolean_literal  go to state 29


State 52

   28 binary_operator: arithmetic_operator .

    $default  reduce using rule 28 (binary_operator)


State 53

   29 binary_operator: relational_operator .

    $default  reduce using rule 29 (binary_operator)


State 54

   30 binary_operator: logical_operator .

    $default  reduce using rule 30 (binary_operator)


State 55

   17 loop: WHILE LPAREN expression RPAREN . LBRACE statements RBRACE

    LBRACE  shift, and go to state 62


State 56

   13 assignment: IDENTIFIER ASSIGN expression SEMICOLON .

    $default  reduce using rule 13 (assignment)


State 57

   14 assignment: type IDENTIFIER ASSIGN expression . SEMICOLON
   20 expression: expression . binary_operator expression

    OR         shift, and go to state 38
    AND        shift, and go to state 39
    EQ         shift, and go to state 40
    NEQ        shift, and go to state 41
    LTE        shift, and go to state 42
    GTE        shift, and go to state 43
    LT         shift, and go to state 44
    GT         shift, and go to state 45
    PLUS       shift, and go to state 46
    MINUS      shift, and go to state 47
    TIMES      shift, and go to state 48
    DIVIDE     shift, and go to state 49
    SEMICOLON  shift, and go to state 63

    binary_operator      go to state 51
    arithmetic_operator  go to state 52
    relational_operator  go to state 53
    logical_operator     go to state 54


State 58

   12 identifiers: identifiers COMMA IDENTIFIER .

    $default  reduce using rule 12 (identifiers)


State 59

   22 expression: LPAREN expression RPAREN .

    $default  reduce using rule 22 (expression)


State 60

   15 conditional: IF LPAREN expression RPAREN LBRACE . statements RBRACE
   16            | IF LPAREN expression RPAREN LBRACE . statements RBRACE ELSE LBRACE statements RBRACE

    $default  reduce using rule 2 (statements)

    statements  go to state 64


State 61

   20 expression: expression . binary_operator expression
   20           | expression binary_operator expression .

    OR      shift, and go to state 38
    AND     shift, and go to state 39
    EQ      shift, and go to state 40
    NEQ     shift, and go to state 41
    LTE     shift, and go to state 42
    GTE     shift, and go to state 43
    LT      shift, and go to state 44
    GT      shift, and go to state 45
    PLUS    shift, and go to state 46
    MINUS   shift, and go to state 47
    TIMES   shift, and go to state 48
    DIVIDE  shift, and go to state 49

    OR        [reduce using rule 20 (expression)]
    AND       [reduce using rule 20 (expression)]
    EQ        [reduce using rule 20 (expression)]
    NEQ       [reduce using rule 20 (expression)]
    LTE       [reduce using rule 20 (expression)]
    GTE       [reduce using rule 20 (expression)]
    LT        [reduce using rule 20 (expression)]
    GT        [reduce using rule 20 (expression)]
    PLUS      [reduce using rule 20 (expression)]
    MINUS     [reduce using rule 20 (expression)]
    TIMES     [reduce using rule 20 (expression)]
    DIVIDE    [reduce using rule 20 (expression)]
    $default  reduce using rule 20 (expression)

    binary_operator      go to state 51
    arithmetic_operator  go to state 52
    relational_operator  go to state 53
    logical_operator     go to state 54


State 62

   17 loop: WHILE LPAREN expression RPAREN LBRACE . statements RBRACE

    $default  reduce using rule 2 (statements)

    statements  go to state 65


State 63

   14 assignment: type IDENTIFIER ASSIGN expression SEMICOLON .

    $default  reduce using rule 14 (assignment)


State 64

    3 statements: statements . statement
   15 conditional: IF LPAREN expression RPAREN LBRACE statements . RBRACE
   16            | IF LPAREN expression RPAREN LBRACE statements . RBRACE ELSE LBRACE statements RBRACE

    INT         shift, and go to state 4
    BOOL        shift, and go to state 5
    IF          shift, and go to state 6
    WHILE       shift, and go to state 7
    RBRACE      shift, and go to state 66
    IDENTIFIER  shift, and go to state 8

    statement    go to state 9
    type         go to state 10
    declaration  go to state 11
    assignment   go to state 12
    conditional  go to state 13
    loop         go to state 14


State 65

    3 statements: statements . statement
   17 loop: WHILE LPAREN expression RPAREN LBRACE statements . RBRACE

    INT         shift, and go to state 4
    BOOL        shift, and go to state 5
    IF          shift, and go to state 6
    WHILE       shift, and go to state 7
    RBRACE      shift, and go to state 67
    IDENTIFIER  shift, and go to state 8

    statement    go to state 9
    type         go to state 10
    declaration  go to state 11
    assignment   go to state 12
    conditional  go to state 13
    loop         go to state 14


State 66

   15 conditional: IF LPAREN expression RPAREN LBRACE statements RBRACE .
   16            | IF LPAREN expression RPAREN LBRACE statements RBRACE . ELSE LBRACE statements RBRACE

    ELSE  shift, and go to state 68

    $default  reduce using rule 15 (conditional)


State 67

   17 loop: WHILE LPAREN expression RPAREN LBRACE statements RBRACE .

    $default  reduce using rule 17 (loop)


State 68

   16 conditional: IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE . LBRACE statements RBRACE

    LBRACE  shift, and go to state 69


State 69

   16 conditional: IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE . statements RBRACE

    $default  reduce using rule 2 (statements)

    statements  go to state 70


State 70

    3 statements: statements . statement
   16 conditional: IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements . RBRACE

    INT         shift, and go to state 4
    BOOL        shift, and go to state 5
    IF          shift, and go to state 6
    WHILE       shift, and go to state 7
    RBRACE      shift, and go to state 71
    IDENTIFIER  shift, and go to state 8

    statement    go to state 9
    type         go to state 10
    declaration  go to state 11
    assignment   go to state 12
    conditional  go to state 13
    loop         go to state 14


State 71

   16 conditional: IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE .

    $default  reduce using rule 16 (conditional)
